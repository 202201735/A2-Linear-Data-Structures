# -*- coding: utf-8 -*-
"""A2 Linear Data structures

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yTXivmXIUOh8PF-YSP_icTczKUZ-HHvp
"""

from collections import deque

# Define the Patient class to store patient details.
class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition):
        self.patient_id = patient_id
        self.name = name
        self.medical_history = medical_history
        self.current_condition = current_condition

# Define the Doctor class to store doctor details.
class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

# Define the Prescription class to store prescription details.
class Prescription:
    def __init__(self, patient_id, doctor_id, prescription_details):
        self.patient_id = patient_id
        self.doctor_id = doctor_id
        self.prescription_details = prescription_details

# Define AppointmentScheduler class to manage appointments.
class AppointmentScheduler:
    def __init__(self):
        # Maps patient_id to doctor_id for appointments.
        self.appointments = {}

    # Schedule an appointment for a patient with a doctor.
    def schedule_appointment(self, patient_id, doctor_id):
        self.appointments[patient_id] = doctor_id

# Define the main HospitalManagement class to integrate all functionalities.
class HospitalManagement:
    def __init__(self):
        self.patients = {}  # Stores patients by patient_id.
        self.doctors = {}  # Stores doctors by doctor_id.
        self.consultation_queue = deque()  # Queue for managing patient consultations.
        self.prescriptions = []  # List to store prescriptions.
        self.scheduler = AppointmentScheduler()  # Scheduler for managing appointments.

    # Add a new patient to the system.
    def add_patient(self, patient):
        self.patients[patient.patient_id] = patient
        # Add patient to the consultation queue.
        self.consultation_queue.append(patient.patient_id)

    # Add a new doctor to the system.
    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_id] = doctor

    # Issue a prescription for a patient.
    def issue_prescription(self, prescription):
        self.prescriptions.append(prescription)

    # Complete a consultation for the next patient in the queue.
    def complete_consultation(self):
        patient_id = self.consultation_queue.popleft()  # Remove patient from queue.
        patient = self.patients[patient_id]
        print(f"Consultation completed for {patient.name}")

    # Search for a patient by their patient_id.
    def search_patient(self, patient_id):
        return self.patients.get(patient_id, None)

    # Schedule an appointment for a patient with a specific doctor.
    def schedule_appointment(self, patient_id, doctor_id):
        self.scheduler.schedule_appointment(patient_id, doctor_id)

# Test cases to validate the functionality of the system.
def test_system():
    hospital_management = HospitalManagement()

    # Adding doctors to the system.
    dr_smith = Doctor(101, "Dr. Smith", "Cardiology")
    dr_jones = Doctor(102, "Dr. Jones", "General Medicine")
    hospital_management.add_doctor(dr_smith)
    hospital_management.add_doctor(dr_jones)

    # Adding patients to the system.
    patient1 = Patient(1, "Hessa", "No significant history", "Flu")
    patient2 = Patient(2, "Aisha", "Asthma", "Asthma Attack")
    hospital_management.add_patient(patient1)
    hospital_management.add_patient(patient2)

    # Scheduling appointments for the patients.
    hospital_management.schedule_appointment(1, 101)
    hospital_management.schedule_appointment(2, 102)

    # Issuing a prescription to a patient.
    prescription1 = Prescription(1, 101, "Antibiotics for 7 days")
    hospital_management.issue_prescription(prescription1)

    # Completing the consultation for the first patient in the queue.
    hospital_management.complete_consultation()

    # Searching for and displaying details of a patient.
    patient = hospital_management.search_patient(1)
    if patient:
        print(f"Found patient: {patient.name}")

# Run the test cases to verify system functionality.
test_system()

# Import deque from collections to create a queue.
from collections import deque

class HospitalManagement:
    def __init__(self):
        # Initialize a deque as the consultation queue.
        # This will be used to manage the order in which patients will be consulted.
        self.consultation_queue = deque()

    def add_patient_to_consultation_queue(self, patient_id):
        # Add a patient's ID to the end of the consultation queue.
        # Patients are enqueued in the order they are added.
        self.consultation_queue.append(patient_id)

    def consult_next_patient(self):
        # Consult the next patient in the queue.
        if self.consultation_queue:
            # If there are patients in the queue, pop the first patient from the queue to consult them.
            # The popleft() method ensures that the queue operates on a First-In-First-Out (FIFO) basis.
            return self.consultation_queue.popleft()
        else:
            # If the queue is empty, print a message indicating that there are no patients waiting.
            print("No patients in the queue.")


def test_consultation_queue():
    # Create an instance of the HospitalManagement system.
    hospital_management = HospitalManagement()

    # IDs of patients to be added to the consultation queue.
    patient_ids = [101, 102, 103]

    # Add each patient to the consultation queue.
    for patient_id in patient_ids:
        hospital_management.add_patient_to_consultation_queue(patient_id)
        print(f"Added patient {patient_id} to the consultation queue.")

    # Now, consult each patient in the order they were added.
    print("\nConsulting patients...")
    while True:
        # Attempt to consult the next patient.
        next_patient = hospital_management.consult_next_patient()
        if next_patient is None:
            # If there are no more patients in the queue, break from the loop.
            break
        else:
            # Otherwise, print the ID of the patient being consulted.
            print(f"Consulted patient {next_patient}.")

# Run the test case.
test_consultation_queue()

# Import the datetime module for handling dates.
from datetime import datetime

class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition, next_of_kin, admission_date):
        # Initialize patient attributes with the provided values.
        self.patient_id = patient_id  # Unique identifier for the patient.
        self.name = name  # Name of the patient.
        self.medical_history = medical_history  # Medical history of the patient.
        self.current_condition = current_condition  # Current medical condition of the patient.
        self.next_of_kin = next_of_kin  # Next of kin information.
        # Convert the admission date from string format to a datetime object.
        self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

class HospitalManagement:
    # Assuming other parts of the class are defined as before

    def sort_patients_by_condition(self):
        # Sorts the list of patients based on their current condition in alphabetical order.
        # The lambda function is used as a key to sort by the current_condition attribute of each patient.
        self.patients_list.sort(key=lambda patient: patient.current_condition)

    def sort_patients_by_admission_date(self):
        # Sorts the list of patients based on their admission date, from earliest to latest.
        # The lambda function is used as a key to sort by the admission_date attribute of each patient.
        self.patients_list.sort(key=lambda patient: patient.admission_date)

# This function tests the sorting functionalities within the HospitalManagement system.
def test_sorting_functions():
    # Step 1: Initialization
    # Create an instance of the HospitalManagement system.
    hospital_management = HospitalManagement()

    # Manually populate the patients_list with Patient instances.
    # These patients have various conditions and admission dates to test the sorting functionality.
    hospital_management.patients_list = [
        Patient(1, "Alice", "History of hypertension", "Hypertension", "Bob, spouse", "2023-01-02"),
        Patient(2, "Bob", "History of diabetes", "Diabetes", "Alice, spouse", "2023-02-01"),
        Patient(3, "Charlie", "History of asthma", "Asthma", "Dana, sibling", "2023-01-01")
    ]

    # Step 2: Testing Sort by Condition
    # Display the order of patients by name before sorting by current condition for comparison.
    print("Before sorting by condition:", [patient.name for patient in hospital_management.patients_list])

    # Call the method to sort patients based on their current medical condition.
    hospital_management.sort_patients_by_condition()

    # Display the order of patients by name after sorting by current condition to verify the sorting operation.
    print("After sorting by condition:", [patient.name for patient in hospital_management.patients_list])

    # Step 3: Testing Sort by Admission Date
    # Display the order of patients by name before sorting by admission date for comparison.
    print("\nBefore sorting by admission date:", [patient.name for patient in hospital_management.patients_list])

    # Call the method to sort patients based on their admission date.
    hospital_management.sort_patients_by_admission_date()

    # Display the order of patients by name after sorting by admission date to verify the sorting operation.
    print("After sorting by admission date:", [patient.name for patient in hospital_management.patients_list])

# Execute the test function to verify the sorting functionalities of the HospitalManagement system.
test_sorting_functions()

from collections import deque
from datetime import datetime

class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition, next_of_kin, admission_date):
        self.patient_id = patient_id
        self.name = name
        self.medical_history = medical_history
        self.current_condition = current_condition
        self.next_of_kin = next_of_kin
        self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

class HospitalManagement:
    def __init__(self, max_patients=None):
        self.patients_list = []  # A dynamic list for patient records
        if max_patients is not None:
            self.patients_array = [None] * max_patients  # Pre-sized list for a known number of patients
        else:
            self.patients_array = []
        self.consultation_queue = deque()  # Queue for managing consultations

    def add_patient_to_list(self, patient):
        self.patients_list.append(patient)

    def add_patient_to_array(self, patient):
        for i, slot in enumerate(self.patients_array):
            if slot is None:
                self.patients_array[i] = patient
                return
        print("No available slot in the patients array. Consider increasing the size.")

    def add_patient_to_consultation_queue(self, patient_id):
        self.consultation_queue.append(patient_id)

    def consult_next_patient(self):
        if self.consultation_queue:
            return self.consultation_queue.popleft()
        else:
            print("No patients in the queue.")
            return None

    def sort_patients_by_condition(self):
        self.patients_list.sort(key=lambda patient: patient.current_condition)

    def sort_patients_by_admission_date(self):
        self.patients_list.sort(key=lambda patient: patient.admission_date)

# Example test function demonstrating the functionality
def test_system():
    hospital_management = HospitalManagement(max_patients=5)

    # Adding patients
    patient1 = Patient(1, "Hessa", "History A", "Condition A", {"name": "Abudlla", "relationship": "Spouse"}, "2023-03-01")
    patient2 = Patient(2, "Aisha", "History B", "Condition B", {"name": "Hessa", "relationship": "Brother"}, "2023-02-28")

    # Add patients to list and array
    hospital_management.add_patient_to_list(patient1)
    hospital_management.add_patient_to_array(patient1)

    hospital_management.add_patient_to_list(patient2)
    hospital_management.add_patient_to_array(patient2)

    # Adding patients to consultation queue
    hospital_management.add_patient_to_consultation_queue(patient1.patient_id)
    hospital_management.add_patient_to_consultation_queue(patient2.patient_id)

    # Displaying the next patient for consultation
    next_patient_id = hospital_management.consult_next_patient()
    print(f"Next patient for consultation: Patient ID {next_patient_id}")

    # Sorting and displaying patients by admission date
    hospital_management.sort_patients_by_admission_date()
    print("Patients sorted by admission date:")
    for patient in hospital_management.patients_list:
        print(f"Patient ID: {patient.patient_id}, Admission Date: {patient.admission_date.date()}")

test_system()

#sorting patient records, sorted by date

def test_system_with_queue_and_sorting():
    hospital_management = HospitalManagement(max_patients=5)

    patient1 = Patient(1, "Abdulla", "History A", "Condition A", {"name": "Aisha", "relationship": "Spouse"}, "2023-03-01")
    patient2 = Patient(2, "Aisha", "History B", "Condition B", {"name": "Abdullah", "relationship": "Brother"}, "2023-02-28")

    hospital_management.add_patient_to_array(patient1)
    hospital_management.add_patient_to_array(patient2)

    # Adding to consultation queue
    hospital_management.add_patient_to_consultation_queue(patient1.patient_id)
    hospital_management.add_patient_to_consultation_queue(patient2.patient_id)

    # Sort and display patients by admission date
    hospital_management.sort_patients_by_admission_date()
    print("Sorted by Admission Date:")
    for patient in hospital_management.patients_array:
        if patient:
            print(f"Patient ID: {patient.patient_id}, Admission Date: {patient.admission_date.date()}")

    # Next patient to be consulted
    next_patient_id = hospital_management.consult_next_patient()
    print(f"Next patient for consultation: {next_patient_id}")

test_system_with_queue_and_sorting()

from datetime import datetime  # Necessary for converting date strings to datetime objects.

class Patient:
    # Constructor method for initializing a new Patient object with provided details.
    def __init__(self, patient_id, name, medical_history, current_condition, next_of_kin, admission_date):
        self.patient_id = patient_id  # Unique identifier for the patient.
        self.name = name  # Patient's name.
        self.medical_history = medical_history  # A summary or detailed description of the patient's medical history.
        self.current_condition = current_condition  # The current medical condition of the patient.
        self.next_of_kin = next_of_kin  # Information about the patient's next of kin.
        # Convert the admission date from a string ('YYYY-MM-DD') to a datetime object for easier manipulation.
        self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

    # Method for updating the patient's details. Each parameter is optional.
    def update_details(self, name=None, medical_history=None, current_condition=None, next_of_kin=None, admission_date=None):
        # Only update the patient's name if a new name is provided.
        if name is not None:
            self.name = name
        # Only update the medical history if a new one is provided.
        if medical_history is not None:
            self.medical_history = medical_history
        # Only update the current condition if a new one is provided.
        if current_condition is not None:
            self.current_condition = current_condition
        # Only update the next of kin information if new information is provided.
        if next_of_kin is not None:
            self.next_of_kin = next_of_kin
        # Only update the admission date if a new one is provided, converting it from a string to a datetime object.
        if admission_date is not None:
            self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

def test_patient_class_and_update():
    # Step 1: Create a new Patient instance with initial details.
    patient = Patient(
        patient_id=1,
        name="Hessa",
        medical_history="No significant history",
        current_condition="Healthy",
        next_of_kin="Aisha",
        admission_date="2023-03-15"
    )

    # Verify initial details are correctly set.
    assert patient.name == "Hessa"
    assert patient.medical_history == "No significant history"
    assert patient.current_condition == "Healthy"
    assert patient.next_of_kin == "Aisha"
    assert patient.admission_date == datetime.strptime("2023-03-15", '%Y-%m-%d')

    # Step 2: Update some details of the patient.
    patient.update_details(
        name="Abdulla",
        current_condition="Requires checkup",
        admission_date="2023-03-20"
    )

    # Verify that the specified details have been updated.
    assert patient.name == "Abdulla"
    assert patient.current_condition == "Requires checkup"
    assert patient.admission_date == datetime.strptime("2023-03-20", '%Y-%m-%d')

    # Verify that details not specified in the update have remained unchanged.
    assert patient.medical_history == "No significant history"
    assert patient.next_of_kin == "Aisha"

    print(" Patient details updated successfully.")

# Run the test case.
test_patient_class_and_update()

class HospitalManagement:
    def __init__(self, max_patients=None):
        self.patients_list = []
        self.patients_array = [None] * max_patients if max_patients else []
        self.consultation_queue = deque()
        # Other initializations

    def add_new_patient(self, patient):
        # Check if the patient ID already exists to avoid duplicates
        if any(p.patient_id == patient.patient_id for p in self.patients_list if p):
            print("A patient with this ID already exists.")
            return
        self.patients_list.append(patient)

    def update_patient_record(self, patient_id, **updates):
        # Find the patient in the list
        patient = next((p for p in self.patients_list if p and p.patient_id == patient_id), None)
        if patient:
            patient.update_details(**updates)
        else:
            print("Patient not found.")

def run_example():
    hospital_management = HospitalManagement(max_patients=10)

    # Adding a new patient
    patient1 = Patient(1, "Abdulla", "No significant history", "Flu", {"name": "Aisha", "relationship": "Spouse"}, "2023-03-01")
    hospital_management.add_new_patient(patient1)

    # Updating an existing patient record
    hospital_management.update_patient_record(1, current_condition="Recovered", admission_date="2023-03-15")

    # Verify the update
    updated_patient = next((p for p in hospital_management.patients_list if p.patient_id == 1), None)
    if updated_patient:
        print(f"Updated Record - Name: {updated_patient.name}, Condition: {updated_patient.current_condition}, Admission Date: {updated_patient.admission_date.date()}")

run_example()

from collections import deque

class HospitalManagement:
    def __init__(self, max_patients=None):
        # Initializes a dynamic list for patient records.
        self.patients_list = []

        # Initializes a fixed-size list (array) for patient records if the maximum number of patients is specified; otherwise, an empty list.
        self.patients_array = [None] * max_patients if max_patients else []

        # Initializes a deque as a queue for managing patient consultations. Deque is used for its efficient append and pop operations.
        self.consultation_queue = deque()

    # Note: Placeholder for existing methods related to adding and updating patient records.

    def add_patient_to_consultation_queue(self, patient_id):
        """
        Adds a patient's ID to the end of the consultation queue.

        :param patient_id: The unique identifier for the patient to be added to the queue.
        """
        self.consultation_queue.append(patient_id)
        print(f"Patient ID {patient_id} added to the consultation queue.")

    def consult_next_patient(self):
        """
        Removes and returns the next patient ID from the consultation queue following FIFO (First-In-First-Out) order.

        :return: The patient ID of the next patient to be consulted, or None if the queue is empty.
        """
        if self.consultation_queue:
            # If the queue is not empty, pop (remove and return) the patient ID at the front of the queue.
            next_patient_id = self.consultation_queue.popleft()
            print(f"Consulting next patient: Patient ID {next_patient_id}")
            return next_patient_id
        else:
            # If the queue is empty, print a message indicating so and return None.
            print("No patients in the queue.")
            return None

    def get_consultation_queue(self):
        """
        Retrieves the current state of the consultation queue.

        :return: A list of patient IDs currently waiting in the consultation queue.
        """
        # Converts the deque to a list to easily view the patient IDs in the queue.
        return list(self.consultation_queue)

def run_example():
    hospital_management = HospitalManagement()

    # Simulate adding patients to the hospital management system
    patient_ids = [1, 2, 3]  # Example patient IDs
    for pid in patient_ids:
        hospital_management.add_patient_to_consultation_queue(pid)

    # Display current queue
    print("Current Consultation Queue:", hospital_management.get_consultation_queue())

    # Simulate consultations in FIFO order
    hospital_management.consult_next_patient()  # Consults and removes the first patient in the queue
    print("Consultation Queue after one consultation:", hospital_management.get_consultation_queue())

    # Consult the next patient
    hospital_management.consult_next_patient()
    print("Consultation Queue after two consultations:", hospital_management.get_consultation_queue())

run_example()

class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

class Appointment:
    def __init__(self, patient_id, doctor_id, appointment_time):
        self.patient_id = patient_id
        self.doctor_id = doctor_id
        self.appointment_time = appointment_time

class HospitalManagement:
    def __init__(self, max_patients=None):
        self.patients_list = []
        self.doctors = {}  # Store doctors by doctor_id
        self.appointments = {}  # Store appointments by patient_id
        self.prescriptions = {}  # Store prescriptions by patient_id

    # Assume methods for adding doctors, patients, and updating records are defined here

    def assign_doctor_to_patient(self, doctor_id, patient_id, appointment_time):
        """
        Assign a doctor to a patient by creating an appointment.
        """
        self.appointments[patient_id] = Appointment(patient_id, doctor_id, appointment_time)

    def add_prescription_for_patient(self, patient_id, prescription_details):
        """
        Add a prescription for a patient.
        """
        if patient_id not in self.prescriptions:
            self.prescriptions[patient_id] = []
        self.prescriptions[patient_id].append(prescription_details)

    def search_patient_and_display_summary(self, patient_id):
        """
        Search for a patient and display their summary.
        """
        patient = next((p for p in self.patients_list if p.patient_id == patient_id), None)
        if not patient:
            print("Patient not found.")
            return

        # Retrieve the doctor's details
        appointment = self.appointments.get(patient_id)
        doctor = self.doctors.get(appointment.doctor_id) if appointment else None

        # Retrieve prescriptions
        prescriptions = self.prescriptions.get(patient_id, [])

        # Display the summary
        print(f"Patient ID: {patient.patient_id}\nName: {patient.name}\nMedical History: {patient.medical_history}\nCurrent Condition: {patient.current_condition}\nAdmission Date: {patient.admission_date.strftime('%Y-%m-%d')}")
        if doctor:
            print(f"Assigned Doctor: {doctor.name}, Specialty: {doctor.specialty}")
        if appointment:
            print(f"Appointment Time: {appointment.appointment_time}")
        if prescriptions:
            print("Prescriptions:")
            for prescription in prescriptions:
                print(f"- {prescription}")
        else:
            print("No prescriptions found.")

def test_search_patient_and_display_summary():
    # Initialize the hospital management system.
    hospital_management = HospitalManagement()

    # Example data for adding to the system.
    patient = Patient(1, "Hessa", "Past flu", "Healthy", "Aisha", "2023-04-01")
    doctor = Doctor(101, "Dr. Smith", "General Practitioner")
    prescription_details = "Vitamin D 1000 IU daily"

    # Adding the patient and doctor to the system.
    hospital_management.patients_list.append(patient)
    hospital_management.doctors[doctor.doctor_id] = doctor

    # Assigning the doctor to the patient and adding a prescription.
    hospital_management.assign_doctor_to_patient(doctor.doctor_id, patient.patient_id, "2023-04-15 10:00 AM")
    hospital_management.add_prescription_for_patient(patient.patient_id, prescription_details)

    # Searching for the patient and displaying their summary.
    hospital_management.search_patient_and_display_summary(patient.patient_id)

# Assuming definitions for the Patient, Doctor, and Appointment classes are provided and compatible.
test_search_patient_and_display_summary()

from collections import deque
from datetime import datetime

# Simplified Patient Class
class Patient:
    def __init__(self, patient_id, name, medical_history, current_condition, admission_date):
        self.patient_id = patient_id
        self.name = name
        self.medical_history = medical_history
        self.current_condition = current_condition
        self.admission_date = datetime.strptime(admission_date, '%Y-%m-%d')

    def update_details(self, medical_history=None, current_condition=None):
        if medical_history is not None:
            self.medical_history = medical_history
        if current_condition is not None:
            self.current_condition = current_condition

# Doctor Class
class Doctor:
    def __init__(self, doctor_id, name, specialty):
        self.doctor_id = doctor_id
        self.name = name
        self.specialty = specialty

# Prescription Class
class Prescription:
    def __init__(self, prescription_details):
        self.prescription_details = prescription_details

# Hospital Management System
class HospitalManagement:
    def __init__(self):
        self.patients = {}  # patient_id: Patient
        self.doctors = {}  # doctor_id: Doctor
        self.appointments = {}  # patient_id: doctor_id
        self.prescriptions = {}  # patient_id: list of Prescription
        self.consultation_queue = deque()

    def add_patient(self, patient):
        if patient.patient_id in self.patients:
            print("Patient already exists.")
        else:
            self.patients[patient.patient_id] = patient

    def update_patient(self, patient_id, **updates):
        patient = self.patients.get(patient_id)
        if patient:
            patient.update_details(**updates)
        else:
            print("Patient not found.")

    def add_doctor(self, doctor):
        self.doctors[doctor.doctor_id] = doctor

    def schedule_appointment(self, patient_id, doctor_id):
        if patient_id in self.patients and doctor_id in self.doctors:
            self.appointments[patient_id] = doctor_id
        else:
            print("Invalid patient or doctor ID.")

    def issue_prescription(self, patient_id, prescription):
        if patient_id not in self.prescriptions:
            self.prescriptions[patient_id] = []
        self.prescriptions[patient_id].append(prescription)

    def add_to_consultation_queue(self, patient_id):
        self.consultation_queue.append(patient_id)

    def consult_next_patient(self):
        if self.consultation_queue:
            return self.consultation_queue.popleft()
        else:
            print("No patients in queue.")

    def search_patient(self, patient_id):
        # Assuming access control check passed
        patient = self.patients.get(patient_id)
        if patient:
            doctor_id = self.appointments.get(patient_id, None)
            doctor = self.doctors.get(doctor_id, None)
            doctor_name = doctor.name if doctor else "No doctor assigned"
            prescriptions = [p.prescription_details for p in self.prescriptions.get(patient_id, [])]
            print(f"Patient ID: {patient.patient_id}, Name: {patient.name}")
            print(f"Doctor: {doctor_name}")
            print(f"Prescriptions: {prescriptions}")
        else:
            print("Patient not found.")

# Example of creating instances and calling methods would follow